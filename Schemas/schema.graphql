const {
  GraphQLObjectType,
  GraphQLSchema,
  GraphQLList,
  GraphQLNonNull,
  GraphQLInt,
  GraphQLID
} = require('graphql');
const {
    addUser,
getUsers,
updateUser,
removeUser
} = require('../Resolvers/resolver.graphql')

const User = require('./user.schema.js');

const UserType = new GraphQLObjectType ({
    name: 'User',
    fields: () => ({
        id: { type: GraphQLID },
        name: { type: GraphQLString },
        email: { type: GraphQLString },
        password: { type: GraphQLString },
        age: { type: GraphQLInt },
    })
});


const schema = new GraphQLSchema({
    query: new GraphQLObjectType({
        name: 'Query',
        fields: {
            get: {
                type: new GraphQLList(UserType),
                resolve() {
                    return getUsers();
                }
            }
        }
    }),

    mutation: new GraphQLObjectType({
        name: 'Mutation',
        fields: {
            post: {
                type: UserType,
                args: {
                    name: { type: GraphQLString },
                    email: { type: GraphQLString },
                    password: { type: GraphQLString },
                    age: { type: GraphQLString }
                },
                resolve(parent, args) {
                    return addUser(args);
                }
            },
            update: {
                type: GraphQLString,
                args: {
                    id: { type: GraphQLID },
                    name: { type: GraphQLString },
                    newName: { type: GraphQLString }
                },
                resolve(parent, args) {
                    return updateUser(args); 
                }
            },
            remove: {
                type: GraphQLString,
                args: {
                    id: { type: GraphQLID }
                },
                resolve(parent, args) {
                    return removeUser(args);
                }
            }
        }
    })
});

module.exports = schema;
